Elm.Raindrops = Elm.Raindrops || {};
Elm.Raindrops.make = function (_elm) {
   "use strict";
   _elm.Raindrops = _elm.Raindrops || {};
   if (_elm.Raindrops.values) return _elm.Raindrops.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Arithmetic = Elm.Arithmetic.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var plong = function (primes) {    return A2($List.member,7,primes) ? "Plong" : "";};
   var plang = function (primes) {    return A2($List.member,5,primes) ? "Plang" : "";};
   var pling = function (primes) {    return A2($List.member,3,primes) ? "Pling" : "";};
   var getPrimeNums = function (number) {    return $Arithmetic.primeFactors(number);};
   var raindrops = function (number) {
      var primes = getPrimeNums(number);
      var drops = A2($Basics._op["++"],pling(primes),A2($Basics._op["++"],plang(primes),plong(primes)));
      return $String.isEmpty(drops) ? $Basics.toString(number) : drops;
   };
   return _elm.Raindrops.values = {_op: _op,getPrimeNums: getPrimeNums,pling: pling,plang: plang,plong: plong,raindrops: raindrops};
};